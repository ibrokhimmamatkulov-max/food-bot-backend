import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN || "8041168610:AAFHg7avPTcONzAoik-sQ5AlsqsRJc5D6cA";
const ADMIN_ID = process.env.ADMIN_ID || "5568760903";

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use(bodyParser.json());

const userStates = {};
const PORT = process.env.PORT || 10000; // Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É Menu –Ω–∏–∂–µ üëá", 
    Markup.keyboard([["üìã Menu"]]).resize()
  );
});

// –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Menu
bot.hears("üìã Menu", (ctx) => {
  const webAppUrl = process.env.WEBAPP_URL || "https://food-bot-mini.onrender.com";
  ctx.reply("–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
    Markup.keyboard([Markup.button.webApp("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", webAppUrl)]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π - –û–î–ò–ù –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!
bot.on("message", async (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);
  
  // 1. –ï—Å–ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
  if (ctx.message.web_app_data) {
    try {
      console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ WebApp:", ctx.message.web_app_data.data);
      
      if (!ctx.message.web_app_data.data) {
        throw new Error("No data received");
      }

      const data = JSON.parse(ctx.message.web_app_data.data);
      console.log("Parsed data:", data);
      
      if (!data.items || !Array.isArray(data.items)) {
        throw new Error("Invalid order format");
      }

      userStates[ctx.chat.id] = { 
        step: "pavilion", 
        order: data,
        createdAt: new Date()
      };
      
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞:");
      return;
      
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:", err.message);
      await ctx.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return;
    }
  }

  // 2. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (userStates[ctx.chat.id]) {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userStates[ctx.chat.id].step);
    await handleOrderState(ctx);
    return;
  }

  // 3. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (ctx.message.text && !ctx.message.text.startsWith('/')) {
    await ctx.reply('–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ "üìã Menu"');
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function handleOrderState(ctx) {
  const state = userStates[ctx.chat.id];
  const userInput = ctx.message.text.trim();

  try {
    if (state.step === "pavilion") {
      if (!userInput) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞:");
        return;
      }
      
      state.pavilion = userInput;
      state.step = "phone";
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
      
    } else if (state.step === "phone") {
      if (!userInput) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
        return;
      }
      
      state.phone = userInput;
      
      const orderText = state.order.items
        .map(item => `‚Ä¢ ${item.name} x${item.quantity}`)
        .join("\n");
      
      await bot.telegram.sendMessage(
        ADMIN_ID,
        `üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n` +
        `üè¢ –ü–∞–≤–∏–ª—å–æ–Ω: ${state.pavilion}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}\n\n` +
        `üõí –ó–∞–∫–∞–∑:\n${orderText}\n\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
      );
      
      await ctx.reply("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
      delete userStates[ctx.chat.id];
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    delete userStates[ctx.chat.id];
  }
}

// Express —Å–µ—Ä–≤–µ—Ä
app.post(`/webhook`, (req, res) => {
  console.log('Webhook received');
  bot.handleUpdate(req.body, res);
});

app.get("/", (req, res) => {
  res.send("Bot server is running...");
});

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
  bot.launch({
    webhook: {
      domain: `https://food-bot-backend-9zck.onrender.com`, // –í–∞—à URL
      port: PORT
    }
  }).then(() => {
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
  }).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  });
});

// –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ SIGINT/SIGTERM –¥–ª—è Render
// Render —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
