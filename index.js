import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN || "8041168610:AAFHg7avPTcONzAoik-sQ5AlsqsRJc5D6cA";
const ADMIN_ID = process.env.ADMIN_ID || "5568760903";

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use(bodyParser.json());

const userStates = {};

// ะะฑัะฐะฑะพัะบะฐ ะบะพะผะฐะฝะดั /start
bot.start((ctx) => {
  ctx.reply("ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั! ะัะฟะพะปัะทัะนัะต ะบะฝะพะฟะบั Menu ะฝะธะถะต ๐", 
    Markup.keyboard([["๐ Menu"]]).resize()
  );
});

// ะะฐะถะฐัะธะต ะบะฝะพะฟะบะธ Menu
bot.hears("๐ Menu", (ctx) => {
  const webAppUrl = process.env.WEBAPP_URL || "https://food-bot-mini.onrender.com";
  ctx.reply("ะัะบัะพะนัะต ะผะตะฝั ัะตัะตะท ะผะธะฝะธ-ะฟัะธะปะพะถะตะฝะธะต", 
    Markup.keyboard([Markup.button.webApp("ะัะบัััั ะผะตะฝั", webAppUrl)]).resize()
  );
});

// ะะฑัะฐะฑะพัะบะฐ ะะกะะฅ ัะพะพะฑัะตะฝะธะน - ะะะะ ะพะฑัะฐะฑะพััะธะบ!
bot.on("message", async (ctx) => {
  // 1. ะัะปะธ ััะพ ะดะฐะฝะฝัะต ะธะท WebApp
  if (ctx.message.web_app_data) {
    try {
      console.log("ะะฐะฝะฝัะต ะธะท WebApp:", ctx.message.web_app_data.data);
      
      if (!ctx.message.web_app_data.data) {
        throw new Error("No data received");
      }

      const data = JSON.parse(ctx.message.web_app_data.data);
      
      if (!data.items || !Array.isArray(data.items)) {
        throw new Error("Invalid order format");
      }

      // ะกะพััะฐะฝัะตะผ ัะพััะพัะฝะธะต ะธ ััะฐะทั ะฟัะพัะธะผ ะฟะฐะฒะธะปัะพะฝ
      userStates[ctx.chat.id] = { 
        step: "pavilion", 
        order: data,
        createdAt: new Date()
      };
      
      await ctx.reply("ะะฒะตะดะธัะต ะฝะพะผะตั ะฟะฐะฒะธะปัะพะฝะฐ:");
      return; // ะะฐะถะฝะพ: ะฒััะพะดะธะผ ะฟะพัะปะต ะพะฑัะฐะฑะพัะบะธ
      
    } catch (err) {
      console.error("ะัะธะฑะบะฐ ะพะฑัะฐะฑะพัะบะธ ะทะฐะบะฐะทะฐ:", err.message);
      await ctx.reply("ะัะธะฑะบะฐ ะพะฑัะฐะฑะพัะบะธ ะทะฐะบะฐะทะฐ โ\nะะพะฟัะพะฑัะนัะต ะตัะต ัะฐะท.");
      return;
    }
  }

  // 2. ะัะปะธ ั ะฟะพะปัะทะพะฒะฐัะตะปั ะตััั ัะพััะพัะฝะธะต (ะทะฐะบะฐะท ะฒ ะฟัะพัะตััะต)
  if (userStates[ctx.chat.id]) {
    await handleOrderState(ctx);
    return;
  }

  // 3. ะัะปะธ ััะพ ะพะฑััะฝะพะต ัะพะพะฑัะตะฝะธะต ะฑะตะท ัะพััะพัะฝะธั
  if (ctx.message.text && !ctx.message.text.startsWith('/')) {
    await ctx.reply('ะงัะพะฑั ัะดะตะปะฐัั ะทะฐะบะฐะท, ะฝะฐะถะผะธัะต "๐ Menu"');
  }
});

// ะคัะฝะบัะธั ะพะฑัะฐะฑะพัะบะธ ัะพััะพัะฝะธั ะทะฐะบะฐะทะฐ
async function handleOrderState(ctx) {
  const state = userStates[ctx.chat.id];
  const userInput = ctx.message.text.trim();

  try {
    if (state.step === "pavilion") {
      if (!userInput) {
        await ctx.reply("ะะพะถะฐะปัะนััะฐ, ะฒะฒะตะดะธัะต ะฝะพะผะตั ะฟะฐะฒะธะปัะพะฝะฐ:");
        return;
      }
      
      state.pavilion = userInput;
      state.step = "phone";
      await ctx.reply("ะะฒะตะดะธัะต ะฝะพะผะตั ัะตะปะตัะพะฝะฐ:");
      
    } else if (state.step === "phone") {
      if (!userInput) {
        await ctx.reply("ะะพะถะฐะปัะนััะฐ, ะฒะฒะตะดะธัะต ะฝะพะผะตั ัะตะปะตัะพะฝะฐ:");
        return;
      }
      
      state.phone = userInput;
      
      // ะคะพัะผะธััะตะผ ะทะฐะบะฐะท
      const orderText = state.order.items
        .map(item => `โข ${item.name} x${item.quantity}`)
        .join("\n");
      
      // ะัะฟัะฐะฒะปัะตะผ ะฐะดะผะธะฝั
      await bot.telegram.sendMessage(
        ADMIN_ID,
        `๐ฆ ะะะะซะ ะะะะะ!\n\n` +
        `๐ข ะะฐะฒะธะปัะพะฝ: ${state.pavilion}\n` +
        `๐ ะขะตะปะตัะพะฝ: ${state.phone}\n\n` +
        `๐ ะะฐะบะฐะท:\n${orderText}\n\n` +
        `โฐ ะัะตะผั: ${new Date().toLocaleString('ru-RU')}`
      );
      
      await ctx.reply("โ ะะฐะบะฐะท ััะฟะตัะฝะพ ะพัะฟัะฐะฒะปะตะฝ ะฐะดะผะธะฝะธัััะฐัะพัั! ะะถะธะดะฐะนัะต ะทะฒะพะฝะบะฐ ะดะปั ะฟะพะดัะฒะตัะถะดะตะฝะธั.");
      
      // ะฃะดะฐะปัะตะผ ัะพััะพัะฝะธะต
      delete userStates[ctx.chat.id];
    }
  } catch (error) {
    console.error("ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต ะทะฐะบะฐะทะฐ:", error);
    await ctx.reply("โ ะัะพะธะทะพัะปะฐ ะพัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต ะทะฐะบะฐะทะฐ. ะะพะฟัะพะฑัะนัะต ะตัะต ัะฐะท.");
    delete userStates[ctx.chat.id];
  }
}

// Express ัะตัะฒะตั
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
  bot.handleUpdate(req.body, res);
});

app.get("/", (req, res) => {
  res.send("Bot server is running...");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
});
